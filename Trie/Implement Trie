/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */
#include <bits/stdc++.h>
class Node {
    public:
    Node* arr[26];
    bool flag;
    Node(){
        flag=false;
    }
};
class Trie {

public:
    Node* root;
    Trie() {
        root = new Node();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        Node* node = root;
        for(int i=0;i<word.size();i++){
            if(node->arr[word[i]-'a']==NULL){
                Node* temp= new Node();
                node->arr[word[i]-'a']=temp;
                node=temp;
            }
            else{
                node=node->arr[word[i]-'a'];
            }
        }
        node->flag=true;
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        Node* node = root;
        for(int i=0;i<word.size();i++){
            if(node->arr[word[i]-'a']==NULL){
                return false;
            }
            else{
                node=node->arr[word[i]-'a'];
            }
        }
        return node->flag;
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Node* node = root;
        for(int i=0;i<prefix.size();i++){
            if(node->arr[prefix[i]-'a']==NULL){
                return false;
            }
            else{
                node=node->arr[prefix[i]-'a'];
            }
        }
        return true;
    }
};
