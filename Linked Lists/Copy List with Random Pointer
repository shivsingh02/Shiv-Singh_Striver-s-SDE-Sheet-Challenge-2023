// O(N) TC
// O(N) SC

#include <bits/stdc++.h>

/*************************************************************

    Following is the LinkedListNode class structure

    template <typename T>   
    class LinkedListNode
    {
        public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode<T> *random;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*************************************************************/

LinkedListNode<int> *cloneRandomList(LinkedListNode<int> *head)
{
    unordered_map<LinkedListNode<int> *,LinkedListNode<int> *> hashMap;
    LinkedListNode<int> * temp = head;
//first iteration for inserting deep nodes of every node in the hashmap.
    while(temp != NULL) {
        LinkedListNode<int> * newNode = new LinkedListNode<int>(temp->data);
        hashMap[temp] = newNode;
        temp = temp->next;
    }
    LinkedListNode<int> * t = head;
//second iteration for linking next and random pointer as given question.
    while(t != NULL) {
        LinkedListNode<int> * node = hashMap[t];
        node->next = (t->next != NULL) ? hashMap[t->next]:NULL;
        node->random = (t->random != NULL) ? hashMap[t->random]:NULL;
        t = t->next;
    }
    return hashMap[head];
}
// OPTIMAL

LinkedListNode<int> *cloneRandomList(LinkedListNode<int> *head)
{
    if(head==NULL) return NULL;
    LinkedListNode<int> * temp = head;
    LinkedListNode<int> * t = head;
    LinkedListNode<int> * t1 = head;
    while(temp) {
        LinkedListNode<int> * newNode = new LinkedListNode<int>(temp->data);
        t=temp->next;
        temp->next=newNode;
        newNode->next=t;
        temp = temp->next->next;
    }
    t=head;
    while(t) {
        if(t->random) t->next->random=t->random->next;
        else t->next->random=NULL;
        t = t->next->next;
    }
    t=head;
    LinkedListNode<int> * dummy=head->next;
    while(t){
        temp=t->next->next;
        t1=t->next;
        if(temp) t1->next=temp->next;
        t->next=temp;
        t=t->next;
    }
    return dummy;
}

