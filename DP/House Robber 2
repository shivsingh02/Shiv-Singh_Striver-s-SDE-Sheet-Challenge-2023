class Solution {
public:
    int maximum_amount(int n, int i, int j, int curr, vector<int> &nums, vector<int> &dp){
        if(curr<i){
            return 0;
        }
        if(dp[curr]!=-1) return dp[curr];
        int notTake=maximum_amount(n,i,j,curr-1,nums,dp);
        int take=nums[curr]+maximum_amount(n,i,j,curr-2,nums,dp);
        return dp[curr]=max(take,notTake);
    }
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        vector<int> dp1(n+1,-1);
        vector<int> dp2(n+1,-1);
        if(n==1) return nums[0];
        int ans1= maximum_amount(n,0,n-2,n-2,nums,dp1);
        int ans2= maximum_amount(n,1,n-1,n-1,nums,dp2);
        return max(ans1,ans2);
    }
};
