#include <bits/stdc++.h> 
bool CanTarget(int i, int target, int n, vector<vector<int>> &dp, vector<int> &arr){
    if(target==0) return true;
    if(i==0){
        if(arr[i]==target) return true;
        else return false;
    }
    if(dp[i][target]!=-1) return dp[i][target];
    bool notTake= CanTarget(i-1,target,n,dp,arr);
    bool take=false;
    if(target>=arr[i]) take=CanTarget(i-1,target-arr[i],n,dp,arr);
    return dp[i][target]=notTake|take;
}

int minSubsetSumDifference(vector<int>& arr, int n)
{
		int sum=0;
        for (int i = 0; i < n; i++) {
          sum += arr[i];
        }
        int k = sum / 2;
		for (int j = k; j <=sum; j++) {
            vector<vector<int>> dp(n, vector<int>(j + 1, -1));
			bool flag=CanTarget(n - 1, j, n, dp, arr);
			if(flag==true) return abs(sum-j-j);
        }
        return sum; 
}
