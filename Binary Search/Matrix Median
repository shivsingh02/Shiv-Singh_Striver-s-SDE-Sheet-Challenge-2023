#include <bits/stdc++.h>
using namespace std;
//brute force
/* int getMedian(vector<vector<int>> &matrix)
{
    int n=matrix.size();
    int m=matrix[0].size();
    vector<int> v;
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            v.push_back(matrix[i][j]);
        }
    }
    sort(v.begin(),v.end());
    return v[((m*n)/2)];
} */
// optimal
int count(int x,int n,int m, vector<vector<int>> &matrix){
    int c=0;
    for(int i=0;i<n;i++){
        int high=m-1;
        int low=0;
        int ct=0;
        while(low<=high){
            int mid=(low+high)/2;
            if(matrix[i][mid]<=x){
                ct=mid+1;
                low=mid+1;
            }
            else high=mid-1;
        }
        c+=ct;
    }
    return c;
}
int getMedian(vector<vector<int>> &matrix){
    int n=matrix.size();
    int m=matrix[0].size();
    int k=m*n;
    int mini=1e5;
    int maxi=1;
    for(int i=0;i<n;i++){
        mini=min(mini,matrix[i][0]);
        maxi=max(maxi,matrix[i][m-1]);
    }
    int low=mini;
    int high=maxi;
    while(low<=high){
        int mid=(low+high)/2;
        int c=count(mid,n,m,matrix);
        if(c<((k/2)+1)) low=mid+1;
        else high=mid-1;
    }
    return low;
}
