//O(n+m) solution
double median(vector<int>& a, vector<int>& b) {
	int n=a.size();
	int m=b.size();
	int m1=(m+n)/2,m2=m1+1,j=0,k=0,prev;
	int v1,v2;
	for(int i=1;i<=m2;i++){
		if((a[j]<=b[k]&&j<n)||k>=m){
			prev=a[j];
			j++;
		}
		else{
			prev=b[k];
			k++;
		}
		if((j+k)==m1) v1=prev;
	}
	v2=prev;
	if((m+n)%2==0){
		return (double)(v1+v2)/2.0;
	}
	else return (double) v2;
}

//Binary Search
O(log(n+m))
double median(vector<int>& a, vector<int>& b) {
	int n=a.size();
	int m=b.size();
	int cap1=(m+n+1)/2;
	int cap2=(m+n-1)/2;
	int low=0,high=cap1;
	while(low<=high){
		int mid=(low+high)/2;
		int l1=INT_MIN,l2=INT_MIN,r1=INT_MAX,r2=INT_MAX;
		if((mid-1)>=0&&(mid-1)<n) l1=a[mid-1];
		if(m>(cap1-mid)&&(cap1-mid)>=0) r2=b[cap1-mid];
		if(m>(cap1-mid-1)&&(cap1-mid-1)>=0) l2=b[cap1-mid-1];
		if(n>mid) r1=a[mid];
		if(l1<=r2&&l2<=r1){
			if((n+m)%2==0) return (double)(min(r1,r2)+max(l1,l2))/2;
			else return (double)max(l1,l2);
		}
		else if(l1>r2) high=mid-1;
		else low=mid+1; 
	}
}

//Binary Search
O(log(min(n,m)))
double median(vector<int>& a, vector<int>& b) {
	int n=a.size();
	int m=b.size();
	if(n>m){
		a.swap(b);
		swap(n,m);
	}
	int cap1=(m+n+1)/2;
	int cap2=(m+n-1)/2;
	int low=0,high=min(n,m);
	while(low<=high){
		int mid=(low+high)/2;
		int l1=INT_MIN,l2=INT_MIN,r1=INT_MAX,r2=INT_MAX;
		if((mid-1)>=0&&(mid-1)<n) l1=a[mid-1];
		if(m>(cap1-mid)&&(cap1-mid)>=0) r2=b[cap1-mid];
		if(m>(cap1-mid-1)&&(cap1-mid-1)>=0) l2=b[cap1-mid-1];
		if(n>mid) r1=a[mid];
		if(l1<=r2&&l2<=r1){
			if((n+m)%2==0) return (double)(min(r1,r2)+max(l1,l2))/2;
			else return (double)max(l1,l2);
		}
		else if(l1>r2) high=mid-1;
		else low=mid+1; 
	}
}
