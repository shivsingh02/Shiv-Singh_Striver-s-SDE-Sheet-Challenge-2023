#include <bits/stdc++.h> 
vector<int> dijkstra(vector<vector<int>> &vec, int vertices, int edges, int source) {
    int n=vertices,m=vec.size();
    vector<int> ans(n,INT_MAX);
    vector<vector<pair<int,int>>> adjList(n);
    for(int i=0;i<m;i++){
        int u=vec[i][0];
        int v=vec[i][1];
        int w=vec[i][2];
        adjList[u].push_back({v,w});
        adjList[v].push_back({u,w});
    }
    priority_queue<pair<int,int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
    ans[source]=0;
    pq.push({0,source});
    while(!pq.empty()){
        int node=pq.top().second;
        int dist=pq.top().first;
        pq.pop();
        for(int i=0;i<(adjList[node].size());i++){
            int tdist=dist+adjList[node][i].second;
            int Node1=adjList[node][i].first;
            if(ans[Node1]>tdist){
                ans[Node1]=tdist;
                pq.push({tdist,Node1});
            }
        }
    }
    return ans;
}
